/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg2048;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.InputStreamReader;

/**
 *
 * @author hvtrung
 */
public class ScoreManager {

    private int currentScore;
    private int currentHighScore;
    //from 2d board => 1d board
    private int[] board = new int[GameBoard.ROWS * GameBoard.COLMS];

    private String filePath;
    private String sub = "Temp.tmp";
    private GameBoard gBoard;
    private boolean newGame;

    public ScoreManager(GameBoard gBoard) {
        this.gBoard = gBoard;
        filePath = new File("").getAbsolutePath();
    }

    public void reset() {
        File f = new File(filePath, sub);
        if (f.isFile()) {
            f.delete();
        }

        newGame = true;
    }

    private void createFile() {
        FileWriter content = null;
        newGame = true;
        try {
            File f = new File(filePath, sub);
            content = new FileWriter(f);
            BufferedWriter writer = new BufferedWriter(content);
            //current score:
            writer.write("" + 0);
            writer.newLine();
            //current highscore:
            writer.write("" + 0);
            writer.newLine();

            for (int row = 0; row < GameBoard.ROWS; row++) {
                for (int col = 0; col < GameBoard.COLMS; col++) {
                    if (row == GameBoard.ROWS && col == GameBoard.COLMS) {
                        writer.write("" + 0);
                    } else {
                        writer.write(0 + "_");
                    }
                }
            }
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void saveGame() {
        FileWriter content = null;
        if (newGame) {
            newGame = false;
        }
        try {
            File f = new File(filePath, sub);
            content = new FileWriter(f);
            BufferedWriter writer = new BufferedWriter(content);
            writer.write("" + currentScore);
            writer.newLine();
            writer.write("" + currentHighScore);
            writer.newLine();

            for (int row = 0; row < GameBoard.ROWS; row++) {
                for (int col = 0; col < GameBoard.COLMS; col++) {
                    int location = row * GameBoard.COLMS + col; // convert from 2d to 1d
                    Tile tile = gBoard.getBoard()[row][col];
                    this.board[location] = tile != null ? tile.getValue() : 0;

                    if (row == GameBoard.ROWS - 1 && col == GameBoard.COLMS - 1) {
                        writer.write("" + board[location]);
                    } else {
                        writer.write(board[location] + "_");
                    }
                }
            }

            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void loadGame() {
        try {

            File f = new File(filePath, sub);

            if (!f.isFile()) {
                createFile();
            }

            BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(f)));
            currentScore = Integer.parseInt(reader.readLine());
            currentHighScore = Integer.parseInt(reader.readLine());

            String[] board = reader.readLine().split("_");
            for (int i = 0; i < board.length; i++) {
                this.board[i] = Integer.parseInt(board[i]);
            }

            reader.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public int getCurrentScore() {
        return currentScore;
    }

    public void setCurrentScore(int currentScore) {
        this.currentScore = currentScore;
    }

    public int getCurrentHighScore() {
        return currentHighScore;
    }

    public void setCurrentHighScore(int currentHighScore) {
        this.currentHighScore = currentHighScore;
    }

    public int[] getBoard() {
        return board;
    }

    public boolean newGame() {
        return newGame;
    }

}
