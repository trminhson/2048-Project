/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg2048;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.util.ArrayList;

/**
 *
 * @author hvtrung
 */
public class Leaderboards {

    private static Leaderboards lBoard;
    private String fileP;
    private String highScore;

    private ArrayList<Integer> topScores;
    private ArrayList<Integer> topTiles;

    private Leaderboards() {
        fileP = new File("").getAbsolutePath();
        highScore = "Score";

        topScores = new ArrayList<Integer>();
        topTiles = new ArrayList<Integer>();

    }

    public static Leaderboards getInstance() {
        if (lBoard == null) {
            lBoard = new Leaderboards();
        }
        return lBoard;
    }

    public void addScore(int score) {
        for (int i = 0; i < topScores.size(); i++) {
            if (score >= topScores.get(i)) {
                topScores.add(i, score);
                topScores.remove(topScores.size() - 1);
                return;
            }
        }
    }

    public void addTiles(int tileValue) {
        for (int i = 0; i < topTiles.size(); i++) {
            if (tileValue >= topTiles.get(i)) {
                topTiles.add(i, tileValue);
                topTiles.remove(topTiles.size() - 1);
                return;
            }
        }
    }

    public void loadScore() {
        try {
            File f = new File(fileP, highScore);
            if (!f.isFile()) {
                createSaveData();
            }

            BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(f)));
            topScores.clear();
            topTiles.clear();

            String[] score = reader.readLine().split("_");
            String[] tile = reader.readLine().split("_");

            for (int i = 0; i < score.length; i++) {
                topScores.add(Integer.parseInt(score[i]));
            }
            for (int i = 0; i < tile.length; i++) {
                topTiles.add(Integer.parseInt(tile[i]));
            }
            reader.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void saveScore() {
        FileWriter content = null;

        try {
            File f = new File(fileP, highScore);
            content = new FileWriter(f);
            BufferedWriter writer = new BufferedWriter(content);

            writer.write(topScores.get(0) + "_" + topScores.get(1) + "_" + topScores.get(2) + "_" + topScores.get(3) + "_" + topScores.get(4));
            writer.newLine();
            writer.write(topTiles.get(0) + "_" + topTiles.get(1) + "_" + topTiles.get(2) + "_" + topTiles.get(3) + "_" + topTiles.get(4));
            writer.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void createSaveData() {
        FileWriter content = null;

        try {
            File f = new File(fileP, highScore);
            content = new FileWriter(f);
            BufferedWriter writer = new BufferedWriter(content);

            writer.write("0_0_0_0");
            writer.newLine();
            writer.write("0_0_0_0");
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public ArrayList<Integer> getTopScores() {
        return topScores;
    }

   

    public ArrayList<Integer> getTopTiles() {
        return topTiles;
    }

   
    
    public int getHighScore(){
        return topScores.get(0);
    }
    
    public int getHighTiles(){
        return topTiles.get(0);
    }
      
}
